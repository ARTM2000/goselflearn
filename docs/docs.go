// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "goselflearn@test.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "query params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LoginUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationError"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "query params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegisterUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BaseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationError"
                        }
                    }
                }
            }
        },
        "/api/posts": {
            "post": {
                "description": "Create new post with title and description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "parameters": [
                    {
                        "description": "query params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePost"
                        }
                    },
                    {
                        "type": "string",
                        "description": "bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CreatePost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationError"
                        }
                    }
                }
            }
        },
        "/api/posts/me": {
            "post": {
                "description": "Get all user's posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetUserPosts"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedError"
                        }
                    }
                }
            }
        },
        "/api/user/me": {
            "get": {
                "description": "Get user all information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetUserInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreatePost": {
            "type": "object",
            "required": [
                "description",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "minLength": 30,
                    "example": "sample description for creating a new post with swagger"
                },
                "title": {
                    "type": "string",
                    "minLength": 8,
                    "example": "sample title"
                }
            }
        },
        "dto.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test654@test.com"
                },
                "password": {
                    "type": "string",
                    "example": "P@ssWord123"
                }
            }
        },
        "dto.UserRegister": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test654@test.com"
                },
                "name": {
                    "type": "string",
                    "minLength": 3,
                    "example": "artm2000"
                },
                "password": {
                    "type": "string",
                    "example": "P@ssWord123"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "gorm.Model /* this is the default form of declaration */",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.BaseError": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.CreatePost": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.newPostDataWrapper"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.GetUserInfo": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.getUserInfoWrapper"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.GetUserPosts": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.allPostsDataWrapper"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.LoginUser": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.loginUserData"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.RegisterUser": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.registerUserData"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.UnauthorizedError": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.ValidationError": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.validationErrorWrapper"
                },
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "declarative message"
                },
                "track_id": {
                    "type": "string",
                    "example": "408c49e3-ba4e-48bd-9ff9-d94614f87c30"
                }
            }
        },
        "response.allPostsDataWrapper": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "response.getUserInfoWrapper": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "response.loginUserData": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "response.newPostDataWrapper": {
            "type": "object",
            "properties": {
                "post": {
                    "$ref": "#/definitions/models.Post"
                }
            }
        },
        "response.registerUserData": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "response.singleValidationErr": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "example": "password"
                },
                "message": {
                    "type": "string",
                    "example": "Password is not strong enough"
                }
            }
        },
        "response.validationErrorWrapper": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/response.singleValidationErr"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3010",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GoSelfLearn",
	Description:      "This project created for self learning simple crud and oauth actions",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
